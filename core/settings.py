import os
from pathlib import Path

from configurations import Configuration
from configurations import values

import datetime

class Dev(Configuration):
    """
    Django settings for core project.

    Generated by 'django-admin startproject' using Django 3.2.7.

    For more information on this file, see
    https://docs.djangoproject.com/en/3.2/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/3.2/ref/settings/
    """

    from pathlib import Path

    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent


    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'django-insecure-r_dhbumw7el)58j7w-l7)2=nvc2^^lwl8b+4grua--qg-3yohx'

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True

    ALLOWED_HOSTS = []


    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',

        # my own app
        'users',
        'homepage',
        'payment',
        'posts',
        
        # third package party
        'allauth',
        'allauth.account',
        'allauth.socialaccount',
        "debug_toolbar",
        'embed_video',
        'rest_framework',
        # 'versatileimagefield',
        'rest_framework_simplejwt',
        # 'django_nose',
    ]
    # debug tool bar
    INTERNAL_IPS = ["127.0.0.1",]

    # add django noise
    TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'

    # Tell nose to measure coverage on the 'foo' and 'bar' apps
    NOSE_ARGS = [
        '--with-coverage',
        '--cover-package=courses.api.views,courses.api.permissions,courses.api.serializer,courses.views',
    ]


    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        # add debug toolbar
        "debug_toolbar.middleware.DebugToolbarMiddleware",

    ]

    ROOT_URLCONF = 'core.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [
                os.path.join(BASE_DIR, "/templates"),
                os.path.join(BASE_DIR, "templates"),
            ],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'core.wsgi.application'


    # Database
    # https://docs.djangoproject.com/en/3.2/ref/settings/#databases

    DATABASES = {
        # 'default': {
        #     'ENGINE': 'django.db.backends.sqlite3',
        #     'NAME': BASE_DIR / 'db.sqlite3',
        # }
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'django_starter3', 
            'USER': 'postgres', 
            'PASSWORD': 'est14641',
            'HOST': '127.0.0.1', 
            'PORT': '5432',
        }
    }


    # Password validation
    # https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/3.2/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'UTC'

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/3.2/howto/static-files/

    STATIC_URL = '/static/'

    # Default primary key field type
    # https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


    # add email backends
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


    # allauth settings

    AUTH_USER_MODEL = 'users.CustomeUserModel'

    ACCOUNT_EMAIL_REQUIRED = True
    ACCOUNT_UNIQUE_EMAIL = True
    ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
    ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
    ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
    
    # add incaseSensetive authentication
    AUTHENTICATION_BACKENDS = (
        'django.contrib.auth.backends.ModelBackend',
        'users.backends.CaseInSensitiveModelBackend'
    )

    from django.urls import reverse_lazy, reverse
    LOGIN_REDIRECT_URL = reverse_lazy('users:profile')
    # LOGIN_REDIRECT_URL = '/'


    ACCOUNT_FORMS = {
        'login': 'accounts.forms.CustomSignInForm',
        'signup': 'accounts.forms.CustomSignupForm',
        'add_email': 'allauth.account.forms.AddEmailForm',
        'change_password': 'accounts.forms.CustomChangePasswordForm',
        'set_password': 'allauth.account.forms.SetPasswordForm',
        'reset_password': 'allauth.account.forms.ResetPasswordForm',
        'reset_password_from_key': 'allauth.account.forms.ResetPasswordKeyForm',
        'disconnect': 'allauth.socialaccount.forms.DisconnectForm',
    }

    # add loggoing
    LOGGING = {    
        'version': 1,
        'disable_existing_loggers': False,
        'incremental': True,
        'root': {
            'level': 'DEBUG',
        },
    }
     # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/3.2/howto/static-files/
    
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')


    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

    # add rest_framework
    REST_FRAMEWORK = {
        "DEFAULT_AUTHENTICATION_CLASSES" : [
            "rest_framework.authentication.SessionAuthentication",
            'rest_framework_simplejwt.authentication.JWTAuthentication',
        ],
        # Use Django's standard `django.contrib.auth` permissions,
        # or allow read-only access for unauthenticated users.
        'DEFAULT_PERMISSION_CLASSES': [
            'rest_framework.permissions.AllowAny'
        ],
        # "DEFAULT_PERMISSION_CLASSES" : [
        #     "rest_framework.permissions.IsAuthenticatedOrReadOnly", # GET
        # ],
        "DEFAULT_PAGINATION_CLASS" : "rest_framework.pagination.PageNumberPagination",
        "PAGE_SIZE" : 4,
    }
    SIMPLE_JWT = {
        'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=1),
        'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=1),
    }
    # AUTH_PROFILE_MODULE = 'users.MyUser'



class Prod(Dev):
    DEBUG = False